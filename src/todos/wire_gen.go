// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package todos

import (
	"github.com/shripadmhetre/golang-wire-demo/src/config"
	"github.com/shripadmhetre/golang-wire-demo/src/domain/todo/todoservice"
	"github.com/shripadmhetre/golang-wire-demo/src/domain/user/userservice"
	"github.com/shripadmhetre/golang-wire-demo/src/infra/server"
	"github.com/shripadmhetre/golang-wire-demo/src/infra/somerealapm"
	"github.com/shripadmhetre/golang-wire-demo/src/infra/sqldb"
	"github.com/shripadmhetre/golang-wire-demo/src/infra/todorepo"
	"github.com/shripadmhetre/golang-wire-demo/src/infra/userrepo"
	"github.com/shripadmhetre/golang-wire-demo/src/todos/handler/api"
	"log"
)

// Injectors from wire.go:

func Wire(enver config.Enver, logger *log.Logger) (*App, error) {
	sqldbConfig, err := sqldb.NewConfig(enver)
	if err != nil {
		return nil, err
	}
	db, err := sqldb.New(sqldbConfig)
	if err != nil {
		return nil, err
	}
	somerealapmConfig, err := somerealapm.NewConfig(enver)
	if err != nil {
		return nil, err
	}
	apm, err := somerealapm.New(somerealapmConfig)
	if err != nil {
		return nil, err
	}
	serverConfig, err := server.NewConfig(enver)
	if err != nil {
		return nil, err
	}
	apiConfig, err := api.NewConfig(enver)
	if err != nil {
		return nil, err
	}
	userserviceConfig := userservice.NewConfig(enver)
	repo := userrepo.New(db)
	service := userservice.New(userserviceConfig, repo)
	todoserviceConfig := todoservice.NewConfig(enver)
	todorepoRepo := todorepo.New(db)
	todoserviceService := todoservice.New(todoserviceConfig, todorepoRepo)
	apiAPI := api.New(apiConfig, apm, logger, service, todoserviceService)
	serverServer := server.New(serverConfig, apiAPI)
	app := newApp(db, apm, serverServer)
	return app, nil
}
